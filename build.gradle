plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.4"
    id("io.micronaut.aot") version "4.3.4"
    id("org.sonarqube") version "4.0.0.2929"
}

version = "0.1"
group = "tr.edu.metu.sm703"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.aws:micronaut-aws-apigateway")
    implementation("io.micronaut.aws:micronaut-aws-lambda-events-serde")
    implementation("io.micronaut.crac:micronaut-crac")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    compileOnly("io.micronaut:micronaut-http-client-jdk")
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("io.micronaut:micronaut-http-client-jdk")

    // Newly Added
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("io.micronaut:micronaut-http-client")
}

application {
    mainClass.set("tr.edu.metu.sm703.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    nativeLambda {
        lambdaRuntimeClassName = "io.micronaut.function.aws.runtime.MicronautLambdaRuntime"
    }
    processing {
        incremental(true)
        annotations("tr.edu.metu.sm703.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
}

tasks.named("dockerfileNative") {
    baseImage = "amazonlinux:2023"
    jdkVersion = "17"
    args(
            "-XX:MaximumHeapSizePercent=80",
            "-Dio.netty.allocator.numDirectArenas=0",
            "-Dio.netty.noPreferDirect=true"
    )
}

sonarqube {
    properties {
        property "sonar.projectKey", "alperemrehas"
        property "sonar.organization", "Alper_Emre"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.branch.name", System.getenv("GITHUB_REF_NAME") ?: 'develop'
    }
}

// Deployment tasks
tasks.register("deployDevelopment") {
    doLast {
        println "Deploying to Development environment..."
        // Add your deployment logic here
    }
}

tasks.register("deployQA") {
    doLast {
        println "Deploying to QA environment..."
        // Add your deployment logic here
    }
}

tasks.register("deployProduction") {
    doLast {
        println "Deploying to Production environment..."
        // Add your deployment logic here
    }
}
